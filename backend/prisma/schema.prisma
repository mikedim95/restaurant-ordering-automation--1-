// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  waiter
  manager
}

enum OrderStatus {
  PLACED
  PREPARING
  READY
  SERVED
  CANCELLED
}

model StoreMeta {
  id       String   @id @default(uuid()) @db.Uuid
  slug     String   @unique @db.VarChar(100)
  name     String   @db.VarChar(255)
  currency String   @default("EUR") @db.VarChar(3)
  createdAt DateTime @default(now()) @db.Timestamp(6)

  @@map("store_meta")
}

model Profile {
  id           String   @id @default(uuid()) @db.Uuid
  email        String   @unique @db.VarChar(255)
  passwordHash String   @db.Text
  role         Role
  displayName  String?  @db.VarChar(255)
  createdAt    DateTime @default(now()) @db.Timestamp(6)

  waiterTables WaiterTable[]

  @@map("profiles")
}

model Table {
  id        String   @id @default(uuid()) @db.Uuid
  label     String   @unique @db.VarChar(50)
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamp(6)

  waiterTables WaiterTable[]
  orders       Order[]

  @@map("tables")
}

model WaiterTable {
  waiterId String
  tableId  String @db.Uuid

  waiter Profile @relation(fields: [waiterId], references: [id], onDelete: Cascade)
  table  Table   @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@id([waiterId, tableId])
  @@map("waiter_tables")
}

model Category {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique @db.VarChar(255)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now()) @db.Timestamp(6)

  items Item[]

  @@map("categories")
}

model Item {
  id          String   @id @default(uuid()) @db.Uuid
  categoryId  String   @db.Uuid
  name        String   @unique @db.VarChar(255)
  description String?  @db.Text
  priceCents  Int
  imageUrl    String?  @db.Text
  available   Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now()) @db.Timestamp(6)

  category     Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  itemModifiers ItemModifier[]
  orderItems     OrderItem[]

  @@map("items")
}

model Modifier {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(6)

  modifierOptions ModifierOption[]
  itemModifiers   ItemModifier[]

  @@map("modifiers")
}

model ModifierOption {
  id              String   @id @default(uuid()) @db.Uuid
  modifierId      String   @db.Uuid
  label           String   @db.VarChar(255)
  priceDeltaCents Int      @default(0)
  createdAt       DateTime @default(now()) @db.Timestamp(6)

  modifier Modifier @relation(fields: [modifierId], references: [id], onDelete: Cascade)

  @@unique([modifierId, label])
  @@map("modifier_options")
}

model ItemModifier {
  itemId     String @db.Uuid
  modifierId String @db.Uuid

  item     Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  modifier Modifier @relation(fields: [modifierId], references: [id], onDelete: Cascade)

  @@id([itemId, modifierId])
  @@map("item_modifiers")
}

model Order {
  id         String      @id @default(uuid()) @db.Uuid
  tableId    String      @db.Uuid
  status     OrderStatus @default(PLACED)
  totalCents Int
  note       String?     @db.Text
  createdAt  DateTime    @default(now()) @db.Timestamp(6)
  updatedAt  DateTime    @default(now()) @db.Timestamp(6)

  table      Table       @relation(fields: [tableId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String  @id @default(uuid()) @db.Uuid
  orderId    String  @db.Uuid
  itemId     String  @db.Uuid
  quantity   Int
  priceCents Int
  modifiers  String? @db.Text

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  item  Item  @relation(fields: [itemId], references: [id])

  @@map("order_items")
}